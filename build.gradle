import java.util.concurrent.TimeUnit

buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

group = 'com.epages'
version = 'DEV-SNAPSHOT'

jar {
    baseName = 'sonardash'
    version = 'DEV-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.jolokia:jolokia-core")
    compile("io.dropwizard.metrics:metrics-core")
    compile("com.google.code.gson:gson")
    compile("org.webjars:bootstrap:3.3.4")
    compile("org.webjars:jquery:2.1.3")
    compile("org.apache.httpcomponents:fluent-hc:4.3.6")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

wrapper {  gradleVersion = "2.3" }

// http://stackoverflow.com/questions/23665976/unable-to-publish-to-local-maven-repo-when-using-gradle-and-spring-boot
install {
    repositories.mavenInstaller {
        pom.project {
            parent {
                groupId 'org.springframework.boot'
                artifactId 'spring-boot-starter-parent'
                version "${springBootVersion}"
            }
        }
    }
}

// https://jdpgrailsdev.github.io/blog/2014/10/14/spring_boot_gradle_git_info.html
task generateGitProperties {
    doLast {
        try {
            def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
            def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
            def commitHash = revision.split(' ').last()
            def timestamp = revision ? new Date(TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null

            File resourcesDir = new File(project.getBuildDir(), 'resources/main')
            File propertiesFile = new File(resourcesDir, 'git.properties')

            if(timestamp) {
                // The project may not have any resources, so create the directories and file
                if(!propertiesFile.exists()) {
                    resourcesDir.mkdirs()
                    propertiesFile.createNewFile()
                }
                propertiesFile.text = """git.branch=${branch}\ngit.commit.id=${commitHash}\ngit.commit.time=${timestamp}\n"""
            } else {
                project.logger.error('Unable to generate git.properties file: revision could not be retrieved from git.')
            }
        } catch (e) {
            project.logger.error('Unable to generate git.properties file.', e)
        }
    }
}

// Generate the Git commit properties file prior to building the artifact
project.tasks.jar.dependsOn('generateGitProperties')

